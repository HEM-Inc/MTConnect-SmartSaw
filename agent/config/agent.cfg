
ServerIP = 0.0.0.0
Port = 5000
AllowPut = false
AllowPutFrom = localhost

ReconnectInterval = 1000
WorkerThreads = 2
# MinimumConfigReloadAge = 30
BufferSize = 17
MaxAssets = 8096

SchemaVersion = 2.0
ShdrVersion = 2.0 # Set Default on all Adapters
JsonVerson = 2.0

SuppressIPAddress = true
IgnoreTimestamps = true
MonitorConfigFiles = true
ConversionRequired = false
UpcaseDataItemValue = true
EnableSourceDeviceModels = false
VersionDeviceXml = true
PreserveUUID = false
Pretty = true

## Security
TlsOnly = false
# TlsPrivateKey = /mtconnect/data/security/user.key
# TlsCertificateChain = /mtconnect/data/ssecurity/user.crt
# TlsCertificatePassword = mtconnect
# TlsDHKey = /mtconnect/data/security/dh2048.pem

## MQTT Client
# MqttHost = 0.0.0.0
# MqttPort = 1883
# MqttCert = NULL
# MqttCaCert = NULL
# MqttPrivateKey = NULL
# MqttTls = NULL

Adapters {
    Saw {
        Protocol = shdr
        RealTime = false
        Host = 10.0.0.4
        Port = 7878
    }
}

Sinks {
#     Push data from agent to a broker
#     MqttService{
#         MqttHost = 10.0.0.4
#         MqttPort = 1883
#         MqttUserName = mtconnect
#         MqttPassword = mtconnect
#         DeviceTopic = mtconnect/device/#
#         ObservationTopic = mtconnect/sample/#
#     }
    Mqtt2Service{
        MqttHost = 10.0.0.4
        MqttPort = 1883
        MqttUserName = mtconnect
        MqttPassword = mtconnect
        MqttClientId = mtc_agent
        
        ProbeTopic = mtconnect/probe/#
        CurrentTopic = mtconnect/current/#
        SampleTopic = mtconnect/sample/#
        AssetTopic = mtconnect/asset/#
        MqttCurrentInterval = 10000ms
        MqttSampleInterval = 500ms
        MqttSampleCount = 1000
    }
}


Files {
    schemas {
        Path = /mtconnect/data/schemas
        Location = /schemas/
    }
    styles {
        Path = /mtconnect/data/styles
        Location = /styles/
    }
    Favicon {
        Path = /mtconnect/data/styles
        Location = /styles/
    }
}

Ruby {
  # module =  /mtconnect/data/ruby/module.rb
}

DevicesStyle { Location = /styles/styles.xsl }
StreamsStyle { Location = /styles/styles.xsl }

logger_config {
    logging_level = warn #trace, debug, info, warn, error, or fatal
    output = cout
}
