cts_version: CTS2
platform: Sysmac
log_severity_level: info
plc_host: 10.0.0.2
server_host: 0.0.0.0
server_port: 7878


// ** Device: Saw
saw_avail =  "AVAILABLE"// Autogenerated from Agent
saw_functionalmode = gMTConnectData.SawFunctionalMode
saw_serial_number = gMachineInformation.Serial
cmd_adapter_version: true
cmd_mtconnect_version = comd "2.3"
cmd_shdr_version = comd "2.0"
cmd_uuid = comd generate_uuid(manufacturer = "HEMSaw",model = "",serialNumber = gMachineInformation.Serial)
cmd_device_name = comd "Saw"
cmd_serial_number = comd  gMachineInformation.Serial // sends the serial number command

saw_delayed = gMTConnectData.SawEquipmentModeDelay // EQUIPMENT_MODE will output On when the pause is active.
saw_loaded = gMTConnectData.SawEquipmentModeLoaded // EQUIPMENT_MODE will output On when the machine is cutting, and Off when not
saw_operating = gMTConnectData.SawEquipmentModeOperating // EQUIPMENT_MODE will output On when the machine is performing any activity or the equipment is active.
saw_powered = "ON" // EQUIPMENT_MODE will output On when the PLC is powered, and Off when not
saw_working = gMTConnectData.SawEquipmentModeWorking // EQUIPMENT_MODE will output On when the hydraulics are opperating, and Off when not


saw_prog_version = gMachineInformation.PLCProgramVersion
saw_prog_design_company = "HEMSAW"
saw_plc_type = "NX-NJ"
saw_plc_manufacturer = "OMRON"


// ** Axes
x0_cond = cond generic_condition(axisCondition = gMachineErrors.MCErrorFlag, nativeCode = "alarm_106")
z0_cond = cond generic_condition(axisCondition = gMachineErrors.MCErrorFlag, nativeCode = "alarm_21")
// z2_cond = cond z2_axis_condition(axisCondition = gMachineErrors.MCErrorFlag)
c0_cond = cond generic_condition(axisCondition = gMachineErrors.MCErrorFlag, nativeCode = "alarm_101")



// *** Linear: X0 Servo Head
x0_target = convert_units(input=gMTConnectData.ArmCommandedPosition, conversionRate=25.4) // inches to mm
x0_abs = convert_units(input=gArmAxisData.PresentPosition, conversionRate=25.4) // inches to mm
x0_vel = convert_units(input=gArmAxisData.AbsoluteVelocity_IPS, conversionRate=25.4) // inches/s to mm/s
x0_force = convert_units(input=gArmAxisData.ForceOnBlade_LBF, conversionRate=4.4482216153) // lbs to N
x0_torque = servo_torque_from_percent(percent = gArmServoAxisData.AverageTorque, maxTorque = 1.2) // max torque in NM
// x0_enhancer_0_freq = gParameter.Misc.BladeEnhancerDriveSideFrequency // Hz
// x0_enhancer_1_freq = gParameter.Misc.BladeEnhancerIdleSideFrequency // Hz
x0_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
x0_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = gArmAxisData.AbsoluteVelocity_IPS, home = false) // refrences interlocked status


// *** Linear: X0 Hydraulic Head
// x0_target = convert_units(input=gMTConnectData.ArmCommandedPosition, conversionRate=25.4) // inches to mm
// x0_abs = convert_units(input=gArmAxisData.PresentPosition, conversionRate=25.4) // inches to mm
// x0_vel = convert_units(input=gArmAxisData.AbsoluteVelocity_IPS, conversionRate=25.4) // inches to mm
// x0_enhancer_0_freq = gParameter.Misc.BladeEnhancerDriveSideFrequency // Hz
// x0_enhancer_1_freq = gParameter.Misc.BladeEnhancerIdleSideFrequency // Hz
// x0_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
// x0_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = gArmAxisData.AbsoluteVelocity_IPS, home = false) // refrences interlocked status


// *** Linear: Y0 Vise
// y0_abs = TODO
// y0_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
// y0_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = TODO, home = false) // refrences interlocked status


// *** Linear: Y1 Infeed Vise
y1_abs = convert_units(input=gMTConnectData.OutOfStockLaserDistance, conversionRate=25.4) // inches to mm
y1_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
// y1_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = TODO, home = false) // refrences interlocked status


// *** Linear: Y2 Outfeed Vise
// y2_abs = TODO
// y2_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
// y2_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = TODO, home = false) // refrences interlocked status


// *** Linear: Z0 inFeed
z0_target = convert_units(input=gMTConnectData.InFeedCommandedPosition, conversionRate=25.4) // inches to mm
z0_abs = convert_units(input=gInfeedAxisData.PresentPosition, conversionRate=25.4) // inches to mm
z0_vel = convert_units(input=gInfeedAxisData.Velocity_IPS, conversionRate=25.4) // inches to mm
z0_torque = servo_torque_from_percent(percent = gInfeedServoAxisData.Torque, maxTorque = 1.2) // max torque in NM
z0_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
z0_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = gInfeedAxisData.Velocity_IPS, home = false) // refrences interlocked status

// *** Linear: Z2 MaterialStop
// z2_target = convert_units(input=gMTConnectData.MSCommandedPosition, conversionRate=25.4) // inches to mm
// z2_abs = convert_units(input=gMaterialStopServoAxisData.PresentPosition, conversionRate=25.4) // inches to mm
// z2_vel = convert_units(input=gMaterialStopServoAxisData.Velocity_IPS, conversionRate=25.4) // inches to mm/s
// z2_torque = servo_torque_from_percent(percent = gMaterialStopServoAxisData.Torque, maxTorque = 0.5) // max torque in NM
// z2_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
// z2_state = axis_state(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved, velocity = gMaterialStopServoAxisData.Velocity_IPS, home = false) // refrences interlocked status


// *** Rotary: C0 Band Motor
c0_speed = convert_bandmotor_units(input=gMTConnectData.BMVFDOutputFrequency, conversionConstant=5.080, conversionFactor=gParameter.Misc.BMConversionFactor) // Hz to FPM to mm/sec
c0_amp = convert_units(input=gMTConnectData.BMVFDOutputCurrent, conversionRate=0.01) // cA to A
c0_tension = convert_units(input=gMTConnectData.BladeTensionPressureSensor, conversionRate=6894.7572932) // psi to Pa
// c0_tension_acw = convert_units(input=gMTConnectData.ACWBladeTensionPressureSensor, conversionRate=6894.7572932) // psi to Pa g
// c0_cutwatcher_volt = gCutwatcherSensor.Distance // V
c0_cutwatcher_dif = convert_units(input=gCutwatcherSensor.Distance, conversionRate=0.001) // micro meter to mm
c0_axis_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved)
c0_state = gMTConnectData.BMState

// ** Controller
saw_estop = gMTConnectData.EStop
saw_condition = cond system_condition(generalFault = gMachineErrorLevels.Fatal, generalWarning = gMachineErrorLevels.NonCritical)
saw_comms_cond = cond generic_condition(ipcCommsError = gMTConnectData.IPCError, nativeCode = "alarm_50")
saw_blade_life = gMachineTime.TotalBladeLifeSeconds
saw_hydraulic_life = gMachineTime.TotalHydraulicsOnTimeSeconds
saw_time_till_next_service = gMachineTime.HoursTillNextServiceSeconds
saw_cut_time = gMachineTime.PresentCutTimeHours
saw_cpu_on_time = gMachineTime.TotalMachineOnTimeSeconds


// *** Path
saw_execution = gMTConnectData.SawExecutionState
// saw_wait = // See model.mtconnect.org for instructions on WAIT_STATE, type:EXECUTION st:INTERRUPTED, type:EXECUTION st:FEED_HOLD for flags
saw_controller_mode = gMTConnectData.SawControllerMode
saw_out_of_stock = cond generic_condition(barPresent = gAutoOperation.OutOfStock, nativeCode = "alarm_1008")

job_id = gActiveJobBuffer.JobData.UUID
job_name = gActiveJobBuffer.JobData.Name
job_active_part_number = gActiveJobBuffer.PartPositionInJob
job_repetitions = gActiveJobBuffer.JobData.Repetitions
job_remaining = gActiveJobBuffer.RemainingRepetitions

part_active_id = gActivePartBuffer.PartData.UUID
part_active_remaining = gActivePartBuffer.RemainingQuantity
part_active_target = gActivePartBuffer.PartData.Quantity

cut_count_complete = gMTConnectData.CutCounter


// ** Systems
// *** Electrical
// saw_electric_cond = cond ???
// This section will be used to track the status of the electrical system and can be extended using an agent adapter for 3rd party systems
// *** Hydraulic
saw_hydraulic_low_level = cond generic_condition(lowLevel = gMTConnectData.VIO_HydraulicTankLevelSensor, nativeCode = "alarm_115")
saw_hydraulic_interlock = axis_interlock(bladeChangeCaution = gMTConnectData.VIO_KeySwitchCaution, bladeChangeEngaged= gMTConnectData.VIO_KeySwitchRemoved) // This needs to be corrected to proper type
// saw_hydraulic_maintenance = // maintaince table output
// *** Enclosure
saw_drive_door_state = gMTConnectData.VIO_DriveWheelDoorSensor
saw_idle_door_state = gMTConnectData.VIO_IdleWheelDoorSensor
// *** WorkEnvelope
material_detection = gMTConnectData.MaterialDetection

// ** Auxiliaries
// *** Saw Sensors
chip_auger = Out_ChipConveyorExtendSolenoid
worklight = Out_WorkLight
laserlight = gMTConnectData.VIO_LaserLight
// shadowlight = gMTConnectData.VIO_ShadowLight

// ** Resources
// *** Stock
material_id = gActiveJobBuffer.JobData.Material.Name
// *** Personnel
saw_operator = gTSVariables.OperatorLoggedIn
saw_maintence = gTSVariables.SupervisorLoggedIn
